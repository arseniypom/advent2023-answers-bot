require('dotenv').config();
const {
  Bot,
  Keyboard,
  InlineKeyboard,
  GrammyError,
  HttpError,
} = require('grammy');
const { hydrate } = require('@grammyjs/hydrate');
const logger = require('./utils/logger');
const mongoose = require('mongoose');

const User = require('./models/User');
const SupportRequest = require('./models/SupportRequest');

const sendAlertToAdmin = require('./utils/alert');
const getTodaysDay = require('./utils/utils');
const faqMessage = require('./consts/faq');
const rulesMessage = require('./consts/rules');

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

bot.command('start', async (ctx) => {
  const inlineKeyboard = new InlineKeyboard().text('–ù–∞—á–∞—Ç—å', 'start-advent');

  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç!\n–Ø - Advent Coding Bot –æ—Ç\n<a href='https://t.me/pomazkovjs' target='_blank'>Pomazkov JS</a> ü§ñ\n–Ø –ø—Ä–∏–Ω–∏–º–∞—é –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∑–¥–µ—Å—å: <i>—Å—Å—ã–ª–∫–∞</i>\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ ‚¨áÔ∏è`,
    {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
      reply_markup: inlineKeyboard,
    },
  );
});

bot.command('support', async (ctx) => {
  try {
    const user = await User.findOne({ telegramId: ctx.from.id });

    if (!user) {
      await ctx.reply(
        `–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ Advent Coding. –ü–æ—Å–∫–æ–ª—å–∫—É —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä—É–π—Å—è (–Ω–∞–∂–º–∏ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ <a href='https://t.me/+Hx6RaBT4Trw3ZjM6' target='_blank'>—á–∞—Ç–µ</a>`,
        {
          parse_mode: 'HTML',
        },
      );
      return;
    }

    await User.findOneAndUpdate(
      { telegramId: ctx.from.id },
      {
        waitingForSupportRequest: true,
        updatedAt: Date.now(),
      },
    );

    const inlineKeyboard = new InlineKeyboard().text(
      '–û—Ç–º–µ–Ω–∞ ‚ùå',
      'cancel-support',
    );

    await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ. –Ø –ø–µ—Ä–µ–¥–∞–º –≤—Å—ë –ê—Ä—Å–µ–Ω–∏—é –∏ –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è (—É–±–µ–¥–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫—Ä—ã—Ç –∏ —Ç–µ–±–µ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å)',
      {
        reply_markup: inlineKeyboard,
      },
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /support:', error);
    sendAlertToAdmin(bot, error, ctx?.update?.update_id);
    await ctx.reply('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å.');
  }
});

bot.command('faq', async (ctx) => {
  await ctx.reply(faqMessage, {
    parse_mode: 'HTML',
    disable_web_page_preview: true,
  });
});

bot.command('rules', async (ctx) => {
  await ctx.reply(rulesMessage);
});

bot.hears('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', async (ctx) => {
  const todaysDate = getTodaysDay();

  const inlineKeyboard = new InlineKeyboard()
    .text('1', `${todaysDate}.1`)
    .text('2', `${todaysDate}.2`);

  await ctx.reply(
    `–°–µ–≥–æ–¥–Ω—è —è –ø—Ä–∏–Ω–∏–º–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á–∏ –æ—Ç ${todaysDate} –¥–µ–∫–∞–±—Ä—è. –ù–∞ –∫–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—á–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å?`,
    {
      reply_markup: inlineKeyboard,
    },
  );
});

bot.on('message', async (ctx) => {
  const messageText = ctx.message.text;

  try {
    const user = await User.findOne({ telegramId: ctx.from.id });

    if (!user) {
      await ctx.reply(
        `–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ Advent Coding. –ü–æ—Å–∫–æ–ª—å–∫—É —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä—É–π—Å—è (–Ω–∞–∂–º–∏ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ <a href='https://t.me/+Hx6RaBT4Trw3ZjM6' target='_blank'>—á–∞—Ç–µ</a>`,
        {
          parse_mode: 'HTML',
        },
      );
      return;
    }

    if (user.waitingForSupportRequest) {
      const newRequest = new SupportRequest({
        telegramId: user.telegramId,
        userName: user.userName,
        text: messageText,
      });
      await newRequest.save();
      await User.findOneAndUpdate(
        { telegramId: ctx.from.id },
        {
          waitingForSupportRequest: false,
          updatedAt: Date.now(),
        },
      );

      await bot.api.sendMessage(
        process.env.ADMIN_TELEGRAM_ID,
        `<b>‚ùó–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${newRequest.userName}\n–¢–µ–∫—Å—Ç: ${newRequest.text}`,
        {
          parse_mode: 'HTML',
        },
      );

      logger.info('–ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:', {
        userId: ctx.from.id,
        userName: ctx.from.username,
        message: ctx.message.text,
      });

      await ctx.reply(
        '–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ, –ê—Ä—Å–µ–Ω–∏–π —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!',
      );

      return;
    }

    const taskNumber = user.waitingForAnswerNumber;
    const todaysDate = getTodaysDay();
    if (taskNumber) {
      if (taskNumber.split('.')[0] !== todaysDate) {
        await User.findOneAndUpdate(
          { telegramId: ctx.from.id },
          {
            waitingForAnswerNumber: '',
            updatedAt: Date.now(),
          },
        );
        await ctx.reply(
          `–°–µ–≥–æ–¥–Ω—è ${todaysDate} –¥–µ–∫–∞–±—Ä—è –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É ${taskNumber} —è —É–∂–µ –ø—Ä–∏–Ω—è—Ç—å –Ω–µ –º–æ–≥—É :(`,
        );
        return;
      }
      if (user.answers[taskNumber]) {
        await User.findOneAndUpdate(
          { telegramId: ctx.from.id },
          {
            waitingForAnswerNumber: '',
            updatedAt: Date.now(),
          },
        );
        await ctx.reply(
          `–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É ${taskNumber} —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç, –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–µ–ª—å–∑—è`,
        );
      } else {
        await User.findOneAndUpdate(
          { telegramId: ctx.from.id },
          {
            answers: {
              ...user.answers,
              [taskNumber]: messageText,
            },
            waitingForAnswerNumber: '',
            updatedAt: Date.now(),
          },
        );
        await ctx.reply('–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ');
      }

      return;
    }

    const keyboard = new Keyboard().text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç').row().resized();
    await ctx.reply(
      `–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–¥–∞—á, –Ω–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç' –≤ –º–µ–Ω—é`,
      {
        reply_markup: keyboard,
      },
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %o', error);
    sendAlertToAdmin(bot, error, ctx?.update?.update_id);
    await ctx.reply('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å.');
  }
});

bot.callbackQuery(/(7|8|9|1[0-8])\.(1|2)/, async (ctx) => {
  const callbackData = ctx.callbackQuery.data;

  try {
    await User.findOneAndUpdate(
      { telegramId: ctx.from.id },
      {
        waitingForAnswerNumber: callbackData,
        updatedAt: Date.now(),
      },
    );

    const inlineKeyboard = new InlineKeyboard().text(
      '–û—Ç–º–µ–Ω–∞ ‚ùå',
      'cancel-answer',
    );

    await ctx.reply(`–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É ${callbackData}`, {
      reply_markup: inlineKeyboard,
    });

    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–ª–±—ç–∫–∞ ${callbackData}:`, error);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã ${callbackData}: %o`, error);
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: %o', error);
    sendAlertToAdmin(bot, error, ctx?.update?.update_id);
    await ctx.reply('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å.');
  }
});

bot.callbackQuery('start-advent', async (ctx) => {
  const { id, first_name, username } = ctx?.from;

  try {
    const statusMessage = await ctx.reply('–°–µ–∫—É–Ω–¥—É...');

    const userInDB = await User.findOne({ telegramId: ctx.from.id });
    if (!userInDB) {
      const newUser = new User({
        telegramId: id,
        firstName: first_name,
        userName: username,
      });
      await newUser.save();
      await statusMessage.editText('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üôå');
    } else {
      await User.findOneAndUpdate(
        { telegramId: ctx.from.id },
        { hasBlockedBot: false, updatedAt: Date.now() },
      );
      await statusMessage.editText('–ù–∞—à–µ–ª –∏ –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ üëå');
    }

    const keyboard = new Keyboard().text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç').row().resized();
    await ctx.reply(
      `–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ —É—á–∞—Å—Ç–∏–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É, –Ω–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç' –≤ –º–µ–Ω—é`,
      {
        reply_markup: keyboard,
      },
    );

    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %o', error);
    sendAlertToAdmin(bot, error, ctx?.update?.update_id);
    await ctx.reply('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å.');
  }
});

bot.callbackQuery('cancel-support', async (ctx) => {
  const statusMessage = await ctx.reply('–°–µ–∫—É–Ω–¥—É...');

  try {
    const user = await User.findOne({ telegramId: ctx.from.id });

    await User.findOneAndUpdate(
      { telegramId: user.telegramId },
      { waitingForSupportRequest: false, updatedAt: Date.now() },
    );
    await statusMessage.editText('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω ‚úÖ');

    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ cancel-support:', error);
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ cancel-support: %o', error);
    sendAlertToAdmin(bot, error, ctx?.update?.update_id);
    await ctx.reply('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å.');
  }
});

bot.callbackQuery('cancel-answer', async (ctx) => {
  const statusMessage = await ctx.reply('–°–µ–∫—É–Ω–¥—É...');

  try {
    const user = await User.findOne({ telegramId: ctx.from.id });

    await User.findOneAndUpdate(
      { telegramId: user.telegramId },
      { waitingForAnswerNumber: '', updatedAt: Date.now() },
    );
    await statusMessage.editText('–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω ‚úÖ');

    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ cancel-answer:', error);
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ cancel-answer: %o', error);
    sendAlertToAdmin(bot, error, ctx?.update?.update_id);
    await ctx.reply('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å.');
  }
});

bot.catch(async (err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  logger.error(
    `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞ ${ctx.update.update_id}: %o`,
    err.error,
  );
  const e = err.error;
  sendAlertToAdmin(bot, e, ctx?.update?.update_id);
  if (e instanceof GrammyError) {
    console.error('Error in request:', e.description);
  } else if (e instanceof HttpError) {
    console.error('Could not contact Telegram:', e);
  } else {
    console.error('Unknown error:', e);
  }
});

async function startBot() {
  try {
    await mongoose.connect(process.env.MONGO_DB_URI);
    bot.start();
  } catch (error) {
    console.log(error.message);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞: %o`, error);
  }
}

startBot();
